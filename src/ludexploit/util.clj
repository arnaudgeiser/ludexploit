(ns ludexploit.util
  (:require [clj-time.format :as f]
            [clj-time.core :as t]
            [clj-time.coerce :as c])
  (:import [org.joda.time DateTimeZone]))

(def zone
  (DateTimeZone/forID "Europe/Zurich"))

(def swiss-date-formatter
  (f/formatter "dd.MM.yyyy" zone))

(def swiss-date-time-formatter
  (f/formatter "dd.MM.yyyy HH:mm" zone))

(def date-formatter
  (f/formatter "dd-MM-yyyy" zone))

(def date-time-formatter
  (f/formatter "dd-MM-yyyy HH:mm" zone))

(defn to-date
  "Convert a java.sql.Date/java.sqlTimeStamp in one org.jodaTime.Date according to one date"
  [sql-date]
  (.withZone (c/from-sql-date sql-date) zone))

(defn to-date-nz
  "Convert a java.sql.Date/java.sqlTimeStamp in one org.jodaTime.Date according to one date"
  [sql-date]
  (c/from-sql-date sql-date))

(defn to-date-time
 "Convert a java.sql.Date in one org.jodatime.DateTime according to one date and one hour"
 [sql-date sql-hour]
 (let [date (to-date sql-date)
       hour (to-date sql-hour)]
   (-> date
     (.plusHours (.getHourOfDay hour))
     (.plusMinutes (.getMinuteOfHour hour))
     (.withZone zone))))
