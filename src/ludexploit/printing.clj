(ns ludexploit.printing
  (:require  [clj-pdf.core :refer :all]
             [clojure.string :refer :all]
             [ring.util.io :refer :all]
             [clj-time.coerce :as c]
             [clj-time.core :as t]
             [clj-time.format :as f]
             [clojure.tools.trace :refer [trace]])

  (:import (java.util Locale)
           (java.net URL)))

(defn table-content [event]
  (let [reservations (:reservations event)
        attendees (mapcat #(:attendees %) reservations)
        spaces (:ticket_spaces event)
        busy-spaces (count attendees)
        av-spaces (- spaces busy-spaces)]
     (concat
      (into []
           (for [r reservations
                 a (:attendees r)]
              [[:pdf-cell {:height 25} (str a)][:pdf-cell (str (:user_email r))]]))
      (reduce (fn [acc e] (conj acc [[:pdf-cell {:height 25} ""] [:pdf-cell ""]])) [] (range av-spaces)))))

(defn table-event [event]
  (concat [:pdf-table {:bounding-box [100 100]} [50 50] [[:pdf-cell {:style :bold} "Nom"] [:pdf-cell {:style :bold} "Email"]]] (table-content event)))

(defn format-day [date]
  (let [formatter (.withLocale (f/formatter-local "EEEE") (Locale/FRANCE))]
     (capitalize (f/unparse formatter date))))

(defn format-hour [date]
  (let [formatter (f/formatter-local "HH:mm")]
     (f/unparse formatter date)))

(defn create-event-page [event]
  (let [
         start (format-day (:event_start_date event))
         start-hour (format-hour (:event_start_date event))
         end-hour (format-hour (:event_end_date event))
         spaces (:ticket_spaces event)
         start-end-hour (str start-hour " - " end-hour)]
   [
    [:paragraph {:size 14 :style :bold :top-margin 10} (:event_name event)]
    [:spacer 2]
    [:paragraph {:size 12} start]
    [:paragraph {:size 11} (str start-end-hour " ")]
    [:spacer 1]
    [:paragraph {:size 11} (str "Nombre de participants : " spaces)]
    [:spacer 1]
    (table-event event)]))

(defn print-programme [programme]
  (piped-input-stream
     (fn [os]
      (pdf
        [{
             :title "Programme"
             :on-page-start (fn [writer document]
                              (let [zone (.getDirectContent writer)
                                     rect (com.lowagie.text.Rectangle. 35 0 550 790)
                                     image (com.lowagie.text.Image/getInstance (clojure.java.io/resource "logo.jpg"))]
                               (.scaleToFit image 150 150)
                               (.setAbsolutePosition image (.getLeft rect) (.getTop rect))
                               (.addImage zone image)))
             :left-margin   35
             :right-margin  35
             :top-margin    80
             :bottom-margin 25}

         (let [last-page? (fn [i] (= i (- (count programme) 1)))]
          (apply concat
                 (map-indexed
                         (fn [idx e] (if (last-page? idx)
                                      (create-event-page e)
                                      (conj (create-event-page e) [:pagebreak])))
                         programme)))]

        os) os)))
