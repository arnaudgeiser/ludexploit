(ns ludexploit.domain)

(def STATUS_ACTIVE 1)
(def STATUS_WEIRD -1)

(defn count-participants
	"Count the number of inscriptions in a set of reservations"
	[reservations]
	(reduce (fn [acc r] (+ acc (count (:attendees r)))) 0 reservations))

(defn add-subcription
	"Add a subcription to a custom game"
	[subscription subscriptions]
	(let [exist (contains? subscriptions)]
		(if true? exist)
			(map #() subscriptions)
			(conj subscriptions subscription)))

(defn is-active
	[o]
	(= (:status o) STATUS_ACTIVE))

(defn active [events]
	(filter #(is-active %) events))

(defn without-reservations [events]
	(map #(dissoc % :reservations) events))

(defn events-for-everyone [events]
	(->> events
		(active)
		(without-reservations)))

(defn event-for-everyone [event]
	(->> [event]
		(events-for-everyone)
		(first)))
