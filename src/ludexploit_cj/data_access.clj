(ns ludexploit-cj.data-access
	(:require [clojure.java.jdbc :as j]
						[clojure.set :refer :all]
						[cheshire.core :refer [generate-string]]
						[php_clj.core :refer [php->clj clj->php]]
						[ludexploit-cj.domain :as d]
            [clj-time.core :as t]
            [clj-time.coerce :as c]
						[ludexploit-cj.config :refer [config]])
	(:import com.mchange.v2.c3p0.ComboPooledDataSource org.joda.time.DateTimeZone))

(def db-spec
	"Initialize the DB specification from the configuration file."
	(:db @config))

(defn pool
		"Create datasource from a C3PO connection pool"
	  [spec]
	  (let [cpds (doto (ComboPooledDataSource.)
	               (.setDriverClass (:classname spec))
	               (.setJdbcUrl (str "jdbc:" (:subprotocol spec) ":" (:subname spec)))
	               (.setUser (:user spec))
	               (.setPassword (:password spec))
	               (.setMaxIdleTimeExcessConnections (* 30 60))
	               (.setMaxIdleTime (* 3 60 60)))]
	    {:datasource cpds}))

(def pooled-db
	"Lazy initialize connection pooled only once"
	(delay (pool db-spec)))

(defn db-connection
	"Get one connection from the connection pool"
	[]
	@pooled-db)

(defn has-booking-meta?
	"Determine if an event contains an element :booking_meta.
	This element can be absent if there is no inscription on it"
	[event]
	(not (empty? (:booking_meta event))))

(defn convert-booking-meta
	"Convert the :booking_meta element which is a PHP serialized object
	into a clojure data strcture. If the element is not present, then return
	an empty object"
	[event]
	(if (has-booking-meta? event)
		(php->clj (:booking_meta event)) {} ))

	(defn to-date-time
  "Convert to java.sql.Date in one org.jodatime.DateTime according to one date and one hour"
  [sql-date sql-hour]
  (let [to-date #(.withZone (c/from-sql-date %) (DateTimeZone/forID "Europe/Zurich"))
        date (to-date sql-date)
        hour (to-date sql-hour)]
    (-> date
      (.plusHours (.getHourOfDay hour))
      (.plusMinutes (.getMinuteOfHour hour))
			(.withZone (DateTimeZone/forID "Europe/Zurich")))))

(defn raw-att-to-att
	"I absolutely don't know what I'm doing...
	Attendees are stored in a so complex data structure
	The aim of this function is to extract the attendee's name from the stucture as a seq"
	[rawatt]
	(for [a rawatt
			  b (val a)
				c (vals b)]
	c))

(defn booking-meta-to-data
	"Convert the booking_meta object as readable values"
	[booking-meta]
  (let [registration (get booking-meta "registration")
				username (get registration "user_name")
				email (get registration "user_email")
				attendees (get booking-meta "attendees")]
    {:username username :user_email email :attendees (raw-att-to-att attendees)}))

(defn convert-booking-meta-from-event
	"Extract booking_meta from event"
	[event]
  (->> event
    (convert-booking-meta)
    (booking-meta-to-data)
    (merge event)))

(defn convert-booking-meta-from-events
	"Extract booking_meta from a seq of events"
	[events]
  (map convert-booking-meta-from-event events))

(defn readable-events
	"Convert a seq of events from the database to a readable-form"
	[events]
  (->> events
    (map #(assoc % :hasinscriptions (= (:meta_value %) "1")))
    (convert-booking-meta-from-events)))

(defn grouped
	[events]
	(for [[base-event grouped-events] (group-by #(select-keys % [:id :event_end_date  :event_start_date :event_name :start_time :end_time :ticket_spaces :meta_value :description :hasinscriptions]) events)
	      :let [categories (set (map #(:category %) grouped-events))
							reservations (map (fn [r] {:attendees (:attendees r) :user_email (:user_email r) :username (:username r) :id (:booking_id r)}) grouped-events)
							participants (d/count-participants reservations)
							event (assoc base-event
                :categories categories
                :participants participants
                :is_full (> participants (:ticket_spaces base-event))
                :event_start_date (to-date-time (:event_start_date base-event) (:start_time base-event))
                :event_end_date (to-date-time (:event_end_date base-event) (:end_time base-event))
              )]]
					(if
						(= participants 0)
							(assoc event :reservations [])
							(assoc event :reservations reservations))))


(defn search-events-by-festival [idFestival]
	(-> (j/query (db-connection) ["select  wp_em_events.event_id as id,
																	wp_em_bookings.booking_id,
																	event_name,
																	event_start_date,
																	event_end_date,
                                  event_start_date as miam,
																	event_start_time as start_time,
																	event_end_time as end_time,
																	event_spaces,
																	ticket_spaces,
																	meta_value,
																	booking_meta,
																	wp_terms.name as category
										from wp_em_events
										join wp_posts on wp_posts.id=wp_em_events.post_id
										join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
										left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
										left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
										left outer join wp_users on wp_em_bookings.person_id=wp_users.id
										left outer join wp_term_relationships on wp_term_relationships.object_id=wp_posts.id
										left outer join wp_term_taxonomy on wp_term_taxonomy.term_taxonomy_id=wp_term_relationships.term_taxonomy_id
										left outer join wp_terms on wp_terms.term_id=wp_term_taxonomy.term_id
										join (select distinct wp_em_events.event_id from wp_em_events
													join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
													left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
													join wp_postmeta on wp_postmeta.post_id=wp_em_events.post_id
													join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id
													where wp_postmeta.meta_value=? and wp_postmeta.meta_key='festival_id') b
										on b.event_id=wp_em_events.event_id
										order by event_name" idFestival])
		(readable-events)
		(grouped)))

(defn search-events-by-festival-user [idFestival idUser]
			(-> (j/query (db-connection) ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces
												from wp_em_events
												join wp_posts on wp_posts.id=wp_em_events.post_id
												join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
												left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
												left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
												left outer join wp_users on wp_em_bookings.person_id=wp_users.id
												join (select distinct wp_em_events.event_id from wp_em_events
															join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
															left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
															join wp_postmeta on wp_postmeta.post_id=wp_em_events.post_id
															join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id
															where wp_postmeta.meta_value=? and wp_postmeta.meta_key='festival_id') b
												on b.event_id=wp_em_events.event_id
												where wp_users.id=?
												order by event_name" idFestival idUser])
				(readable-events)
				(grouped)))

(defn search-events-by-date [date]
  (-> (j/query (db-connection) ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces,meta_value, booking_meta, user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    where event_start_date>=? and event_start_date<=?
                    order by event_name" date date])
										(readable-events)
										(grouped)))

(defn search-event [idEvent]
  (-> (j/query db-spec ["select
														wp_em_events.event_id as id,
														wp_posts.post_content as description,
														wp_em_bookings.booking_id,
														event_name,
														event_start_date,
														event_end_date,
														event_start_time as start_time,
														event_end_time as end_time,
														event_spaces,
														ticket_spaces,
														meta_value,
														booking_meta,
														user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    where wp_em_events.event_id=?
                    order by event_name" idEvent])
				(readable-events)
				(grouped)
				(first)))

(defn search-event-raw [idEvent]
	(->> (j/query (db-connection) ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces ,meta_value, booking_meta, user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    where wp_em_events.event_id=?
                    order by event_name" idEvent])
				(first)
				(convert-booking-meta)))
(defn search-user [username]
	(first (j/query (db-connection) ["select * from wp_users where user_login=?" username])))

(defn search-reservations [id]
	(j/query (db-connection) ["select e.event_name, b.booking_spaces from wp_em_bookings b join wp_em_events e on b.event_id=b.event_id where person_id=?" id]))

(defn search-places []
	(j/query (db-connection) "select location_id as id, location_name as name, location_address as address, location_town as city, location_postcode as npa, location_latitude as latitude, location_longitude as longitude from wp_em_locations"))

(defn create-game [{name :name nbplayers :nbplayers type :type duration :duration}]
	(j/execute! (db-connection) ["insert into games (owner,name,nb_players,players) values (?,?,?,?)" "2" "One game to rule them all" "4" "Nothing..."]))

(defn search-games []
	(j/query (db-connection) "select id, name, nb_players, players from games where nb_players"))

(defn search-game [id]
	(j/query (db-connection) ["select id, name, nb_players, players from games where id=?" id]))

(defn update-game [game]
	(j/execute! (db-connection) ["update games set players=?" (generate-string (:players game))]))

(defn delete-game [game]
	(j/execute! (db-connection) ["delete from games where id=?" (:id game)]))

(defn subscribe-to-game-as [name]
	(let [games search-games
				new-players (conj (:players games) name)]
			(assoc games :players new-players)))

(defn delete-reservation [idReservation]
	(j/execute! (db-connection) ["delete from wp_em_bookings where booking_id=?" idReservation]))

(defn convert-to-booking-meta [reservation]
	(let [attendees [{"attendee_name" (:name reservation)}]
				booking-meta {"attendees" {"1" attendees}}]
				(clj->php booking-meta)))

(defn create-reservation [{:keys [reservation event_id]}]
	(let [current-date (java.util.Date.)
			 booking-meta (convert-to-booking-meta reservation)]
		(j/execute! (db-connection) ["insert into wp_em_bookings
													(event_id, person_id, booking_spaces, booking_date, booking_status, booking_meta)
													values
													(?,0,1,?,1,?)" event_id current-date booking-meta])))

(defn categories
	"Recherche de toutes les catégories des évènements présentes"
	[]
	(-> (j/query (db-connection) "select ter.term_id as id, ter.name as name
																from wp_terms ter
																join wp_term_taxonomy tax ON ter.term_id=tax.term_id
																where taxonomy='event-categories'")))

(defn festivals-to-domain [festivals]
		(map #(rename-keys % {:post_title :name}) festivals))

(defn search-festivals []
		(-> (j/query (db-connection) "select post_title, ID from wp_posts where post_type='festival'and post_status='publish'")
		(festivals-to-domain)))
